AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  HubName:
    Type: String
    Default: vpn_hub
    Description: HUB_NAME
  VpnUserName:
    Type: String
    Default: vpn_user
    Description: VPN_USER_NAME
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Instance Type
  GitHubAccountID:
    Type: String
    Default: ''
    Description: GitHub account id
  NoticeType:
    Type: String
    Default: ''
    AllowedValues:
      - line
      - slack
      - ''
    Description: NoticeType
  NoticeToken:
    Type: String
    Default: ''
    Description: NoticeToken
Mappings:
  RegionAMIMap:
    us-east-1:
      AMI: ami-02354e95b39ca8dec
    us-west-2:
      AMI: ami-0873b46c45c11058d
    eu-west-1:
      AMI: ami-07d9160fa81ccffb5
    ap-southeast-1:
      AMI: ami-0cd31be676780afa7
    ap-northeast-1:
      AMI: ami-0cc75a8978fbbc969
    af-south-1:
      AMI: ami-08c9d9528020000ac
    me-south-1:
      AMI: ami-01f41d49c363da2ad
    sa-east-1:
      AMI: ami-018ccfb6b4745882a
Resources:
  # Seacret string
  HubPW:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        GenerateStringKey: password
        PasswordLength: 16
        SecretStringTemplate: '{}'
        ExcludePunctuation: true
  VpnUserPW:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        GenerateStringKey: password
        PasswordLength: 16
        SecretStringTemplate: '{}'
        ExcludePunctuation: true
  VpnKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        GenerateStringKey: password
        PasswordLength: 8
        SecretStringTemplate: '{}'
        ExcludePunctuation: true
  # VPC
  VPNVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: VPNVPC
        - Key: created
          Value: created by Cloud Formation
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPNVPC-IGW
        - Key: created
          Value: created by Cloud Formation
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPNVPC
      InternetGatewayId: !Ref InternetGateway
  # public segment
  VPNSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPNVPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: VPNVPC-VPNSubnet
        - Key: created
          Value: created by Cloud Formation
  # route table
  VPNSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPNVPC
      Tags:
        - Key: Name
          Value: VPNVPC-Subnet-RouteTable
        - Key: created
          Value: created by Cloud Formation
  VPNSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPNSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPNSubnetRouteTable
      SubnetId: !Ref VPNSubnet
  # EC2 setup
  VPNEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPNSecurityGroup
      GroupName: VPNSecurityGroup
      VpcId: !Ref VPNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 500
          ToPort: 500
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4500
          ToPort: 4500
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: VPNVPC-SG
        - Key: created
          Value: created by Cloud Formation
  VPNEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionAMIMap
        - !Ref AWS::Region
        - AMI
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref VPNSubnet
          GroupSet:
            - !Ref VPNEC2SG
      IamInstanceProfile: !Ref SecretsManagerReadRoleInstanceProfile
      #LaunchTemplate:
      #  LaunchTemplateId: !Ref 'Ec2InstanceLaunchTemplate'
      #  Version: 1
      Tags:
        - Key: Name
          Value: VPNVPC-EC2
        - Key: created
          Value: created by Cloud Formation
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            yum -y update
            yum -y install gcc
            yum -y install jq
            yum -y install python3
            # download shell script
            wget -O /tmp/install_softether.sh https://raw.githubusercontent.com/motya1121/vpn_server_builder/master/src/setup_vpn/install_softether.sh
            wget -O /tmp/setup_softether.sh https://raw.githubusercontent.com/motya1121/vpn_server_builder/master/src/setup_vpn/setup_softether.sh
            wget -O /tmp/setup_ssh_key.sh https://raw.githubusercontent.com/motya1121/vpn_server_builder/master/src/setup_vpn/setup_ssh_key.sh
            chmod 755 /tmp/install_softether.sh
            chmod 755 /tmp/setup_softether.sh
            chmod 755 /tmp/setup_ssh_key.sh
            # setup aws configure
            printf "\n\n${Region}\njson\n" | aws configure
            # setup ssh key
            bash /tmp/setup_ssh_key.sh ${GitHubAccountID}
            # install softether
            bash /tmp/install_softether.sh
            sleep 5
            # setup softether
            bash /tmp/setup_softether.sh ${HubName} ${HubPW} ${VpnUserName} ${VpnUserPW} ${VpnKey}
            # reload
            /etc/init.d/vpnserver stop
            /etc/init.d/vpnserver start
            # notice
            wget -O /tmp/notice.sh https://raw.githubusercontent.com/motya1121/vpn_server_builder/master/src/notice/notice.sh
            wget -O /tmp/notice.py https://raw.githubusercontent.com/motya1121/vpn_server_builder/master/src/notice/notice.py
            chmod 755 /tmp/notice.sh
            chmod 755 /tmp/notice.py
            bash /tmp/notice.sh ${VpnUserName} ${VpnUserPW} ${VpnKey} ${NoticeType} ${NoticeToken}
          - {
              Region: !Ref 'AWS::Region',
              HubName: !Ref HubName,
              HubPW: !Ref HubPW,
              VpnUserName: !Ref VpnUserName,
              VpnUserPW: !Ref VpnUserPW,
              VpnKey: !Ref VpnKey,
              GitHubAccountID: !Ref GitHubAccountID,
              NoticeType: !Ref NoticeType,
              NoticeToken: !Ref NoticeToken,
            }

  Ec2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceMarketOptions:
          SpotOptions:
            SpotInstanceType: one-time
            InstanceInterruptionBehavior: terminate
          MarketType: spot
  # IAM Role
  SecretsManagerReadRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: SecretsManagerReadRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: SecretsManagerRead
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:*'
                Resource: '*'
      Tags:
        - Key: Name
          Value: VPN-SecretsManagerRead
        - Key: created
          Value: created by Cloud Formation
  SecretsManagerReadRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref SecretsManagerReadRole
Outputs:
  PublicEC2IP:
    Value: !GetAtt VPNEC2.PublicIp
  GetHubPWByCLI:
    Value: !Sub |+
      aws secretsmanager get-secret-value
        --secret-id ${HubPW}
        --region ${AWS::Region}
        --query SecretString
  GetVpnUserPWByCLI:
    Value: !Sub |+
      aws secretsmanager get-secret-value
        --secret-id ${VpnUserPW}
        --region ${AWS::Region}
        --query SecretString
  GetVpnKeyByCLI:
    Value: !Sub |+
      aws secretsmanager get-secret-value
        --secret-id ${VpnKey}
        --region ${AWS::Region}
        --query SecretString
